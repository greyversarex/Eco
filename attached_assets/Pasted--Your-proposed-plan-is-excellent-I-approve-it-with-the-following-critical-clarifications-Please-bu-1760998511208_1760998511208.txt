"Your proposed plan is excellent. I approve it with the following critical clarifications. Please build the application according to these 12 points:"
Admin Panel: Implement a secure admin panel at a /admin route with login/password authentication. Its purpose is for department management and full message oversight. "System monitoring" specifically means the ability for the admin to view all messages exchanged between all departments.
Department Access: The primary access for departments must be through unique access codes only. There should be no individual user accounts, logins, or passwords for departments.
Department Management: The admin panel must allow the creation, editing, and deletion of departments. Each department must be assigned to a visual group ("Upper", "Middle", or "Lower" block).
Messaging System: Implement a complete messaging system with separate "Inbox" and "Outbox" sections. Unread messages must be clearly highlighted. Crucially, implement message threading, where replies are linked to the original message to form a clear conversation history.
Document Composition Form: The form for creating a new message must include required fields for subject/document type, date, recipient (dropdown list of all departments), and a main content area. It must also include an optional text field for the "Executor's Name".
File Attachments: The system must allow attaching files to messages. These files must be uploaded to an external S3-compatible cloud storage, with only the link to the file being stored in the database.
Department Main Screen (NOT a Dashboard): After logging in, a department user sees a main screen. This screen is a simple menu, not an analytical dashboard. It must display a list of all other departments, visually grouped into the "Upper", "Middle", and "Lower" blocks. Each department in the list must have a visible counter for unread messages. There should be no other widgets, charts, or statistics on this screen.
Message Interaction: Users must be able to open any message in their inbox, view its content, download the attached file, and use a "Reply" button which opens the composition form to continue the message thread.
Bilingual Support: The entire interface must support two languages: Tajik (as the default) and Russian. A simple language switcher must be present and easily accessible.
User Interface (UI) Design: The UI must be minimalistic and clean. Use a white or very light-gray background. Green must be the only accent color, used for buttons, links, and important indicators. Avoid complex shadows, gradients, and multi-colored tags.
Database: The application must use an external PostgreSQL database (e.g., via Neon or Supabase) for all data storage to ensure data persistence and safety.
Backend Architecture: The backend must be built as a RESTful API. This is a non-negotiable requirement to ensure future compatibility with iOS and Android mobile applications.