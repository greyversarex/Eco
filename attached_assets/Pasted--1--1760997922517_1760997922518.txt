Техническое Задание на разработку платформы "ЭкоТочикистон"
1. Концепция и Ключевые Цели Проекта
Продукт: Создать защищенную внутреннюю веб-платформу для обмена официальными сообщениями и документами между различными отделами организации.
Ключевые цели:
Централизация коммуникаций: Уйти от разрозненных каналов связи (email, мессенджеры) в единую, контролируемую среду.
Безопасность и контроль: Обеспечить полный контроль над документооборотом со стороны администратора.
Масштабируемость: Спроектировать систему так, чтобы в будущем на ее основе можно было легко создать полноценные мобильные приложения для iOS и Android без изменения основной логики.
Надежность: Гарантировать 100% сохранность всех данных (сообщений, файлов, пользователей) при обновлениях кода и переносе на сервер.
2. Архитектурные Требования (Фундамент Системы)
Это самый важный раздел. Replit должен реализовать систему, следуя этим принципам, чтобы обеспечить достижение ключевых целей.
Архитектура "API-First":
Система должна быть разделена на две независимые части:
Бэкенд (Backend): Это "мозг" системы, реализованный как RESTful API. Он отвечает за всю логику: управление пользователями, обработку сообщений, работу с файлами, безопасность.
Фронтенд (Frontend): Это "лицо" системы — веб-сайт, с которым взаимодействуют пользователи. Он не содержит логики, а только отправляет запросы к Бэкенду и отображает полученные данные.
Обоснование: Такой подход является обязательным. Когда мы решим создавать мобильные приложения, они будут просто обращаться к тому же самому Бэкенд API, что и сайт. Это сэкономит 90% времени и средств на разработку.
Внешняя Персистентная База Данных:
Все данные (информация об отделах, сообщения, пользователи) должны храниться во внешней, облачной базе данных PostgreSQL.
Запрещено использовать локальные файлы или SQLite, которые предоставляет Replit по умолчанию. Необходимо использовать сервисы вроде Neon, Supabase или ElephantSQL.
Обоснование: Это гарантирует, что при обновлении кода на Replit или при переносе проекта на VDS-сервер (например, TimeWeb) вся база данных останется в целости и сохранности.
Внешнее Облачное Хранилище Файлов:
Все файлы, которые пользователи прикрепляют к сообщениям, должны загружаться в S3-совместимое облачное хранилище (например, AWS S3, Backblaze B2, Supabase Storage).
В базе данных должна храниться только ссылка на файл, а не сам файл.
Обоснование: Это обеспечивает безопасность, высокую скорость загрузки и неограниченное пространство для хранения документов.
3. Роли Пользователей и Логика Доступа
В системе должно быть два четко разделенных типа доступа:
Администратор:
Доступ: Через отдельную, скрытую страницу (например, /admin) по классической схеме логин + пароль.
Полномочия: Является "суперпользователем" системы. Имеет неограниченные права.
Пользователь Отдела:
Это не личный кабинет. Пользователь представляет интересы всего своего отдела.
Доступ: Через главную страницу сайта путем ввода уникального кода доступа, который генерируется Администратором. Никаких логинов и паролей для отделов.
4. Функциональные Модули Системы
4.1. Панель Администратора
Это центр управления всей системой.
Управление Отделами:
Создание, редактирование и удаление отделов.
При создании отдела администратор указывает его название и принадлежность к группе (Верхний, Средний или Нижний блок) для визуального отображения.
Управление Доступом:
Для каждого отдела администратор может сгенерировать или изменить уникальный код доступа.
Полный Мониторинг:
Доступ к просмотру всех сообщений и всех файлов, которыми обмениваются абсолютно все отделы.
Возможность видеть общую статистику (например, общее количество сообщений в системе).
4.2. Кабинет Отдела (Основной интерфейс)
Это то, что видит пользователь после входа по коду доступа.
Главный Экран:
Основное пространство занимает список всех существующих отделов, визуально сгруппированных по трем блокам (Верхний, Средний, Нижний).
На карточке каждого отдела должен быть индикатор (например, кружок с цифрой), показывающий количество непрочитанных сообщений от этого отдела.
Система Сообщений:
Входящие (Хатҳои воридшуда): Отдельная страница со списком всех полученных сообщений. Непрочитанные должны быть визуально выделены.
Исходящие (Хатҳои равоншуда): Отдельная страница со списком всех отправленных сообщений и их статусом (доставлено, прочитано).
Просмотр и Ответ: Пользователь может открыть любое сообщение, скачать прикрепленный файл и ответить на это конкретное сообщение, создавая цепочку переписки.
Создание Нового Сообщения (Навиштани хат):
Отдельная форма, которая позволяет отправить сообщение другому отделу.
Обязательные поля: Тема/вид документа, дата, получатель (выбор из списка отделов), основное содержание.
Необязательное поле: "Исполнитель (ФИО)" — чтобы было понятно, кто именно из сотрудников отдела отправил сообщение.
Прикрепление Файлов: Возможность прикрепить любой тип файла.
5. Нефункциональные Требования
Дизайн и UX:
Replit должен предложить профессиональный, чистый и интуитивно понятный дизайн.
Основной цвет — зеленый и его оттенки. Интерфейс не должен быть перегружен информацией. Главный принцип — простота и удобство.
Многоязычность:
Система должна поддерживать два языка: Таджикский (по умолчанию) и Русский. Пользователь должен иметь возможность легко переключать язык интерфейса.
Безопасность:
Все соединения должны быть защищены. Данные пользователей и сообщения должны быть недоступны для внешнего мира.