Тема: Полное Техническое Задание на Адаптацию Проекта "ЭкоТочикистон" для Рабочего Сервера
Контекст и проделанная работа:
Отличная работа над проектом "ЭкоТочикистон"! На текущий момент, в среде Replit все функции, включая новую систему загрузки нескольких файлов, отправку сообщений и скачивание, работают идеально.
Теперь я хочу объяснить, что мы делали дальше и с какими проблемами столкнулись, чтобы ты, как главный разработчик, мог подготовить код к финальному развертыванию.
Первоначальное Развертывание: Мы успешно развернули первоначальную версию кода на нашем собственном VDS-сервере (Ubuntu 22.04) на хостинге TimeWeb. Мы настроили Nginx, PM2 и базу данных PostgreSQL от Neon.
Главное Архитектурное Изменение: Мы поняли, что "магическое" хранилище Replit Object Storage не будет работать на внешнем сервере. Поэтому мы приняли стратегическое решение и полностью перешли на профессиональное внешнее решение — Supabase Storage. Мы создали проект в Supabase, получили ключи (Project URL и service_role key) и создали публичный "склад" (Bucket) с именем eco-files.
Проблема: Несмотря на наши попытки вручную адаптировать код на сервере (заменить ключи, исправить файлы objectStorage.ts, routes.ts и ObjectUploader.tsx), на рабочем сервере возникают постоянные и трудно диагностируемые ошибки при отправке сообщений и загрузке файлов. Ошибки меняются, что говорит о глубокой несовместимости старой логики с новой системой хранения.
Текущая ситуация: У нас есть идеально работающая версия здесь, на Replit, и неработающая версия на рабочем сервере. Нам нужно прекратить "латать" код на сервере и вместо этого взять чистую, на 100% готовую к Production версию прямо от тебя.
Твоя Задача: Подготовить Код и План к Финальному Развертыванию
Твоя цель — проанализировать текущий, идеально работающий код в этом Replit-проекте и подготовить его для "чистой" установки на наш VDS-сервер, который использует Supabase Storage.
Пожалуйста, выполни следующие шаги:
Полная Ревизия Кода: Проверь все файлы, связанные с отправкой сообщений и загрузкой файлов (ComposeMessage.tsx, ObjectUploader.tsx, routes.ts, objectStorage.ts и любые другие). Убедись, что в них не осталось никаких следов и зависимостей от старого хранилища Replit и что вся логика на 100% правильно использует Supabase Storage через переменные окружения.
Финализация Переменных Окружения: Сформируй финальный, единственно правильный список всех переменных окружения (secrets), которые необходимы для работы Production-версии с базой данных Neon и хранилищем Supabase.
Подготовка к Обновлению: Подготовь текущий код к финальной выгрузке. Убедись, что все изменения сохранены и готовы для отправки на наш репозиторий GitHub.
Создание Новой Инструкции по Развертыванию: Создай новую, исчерпывающую пошаговую инструкцию по "чистой" установке и обновлению нашего сервера. Эта инструкция должна включать все шаги, начиная от git clone и заканчивая pm2 restart, и гарантировать, что любой, кто ей последует, получит рабочий сайт без ошибок.
Твоя Свобода и Ответственность
Ты — главный архитектор этого кода. Ты знаешь его лучше всех. Тебе предоставляется свобода вносить любые изменения, которые ты считаешь необходимыми, чтобы сделать код стабильным, надежным и полностью совместимым с нашей новой архитектурой (Node.js + Express + React + PostgreSQL (Neon) + Supabase Storage).
Наша цель — получить от тебя версию кода и инструкцию, которые позволят нам уверенно и без проблем запустить и в дальнейшем обновлять наш сайт.
Пожалуйста, приступай. Мы готовы следовать твоим рекомендациям